//-------------------------------------------------------------------------
// Lfi__nbits_8.v renamed to lfi.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.
// Renamed and slightly modified by Phillip Marlowe

// PyMTL Component Lfi Definition
// At /workspace/lfi.py

module Lfi
(
  //input  logic [0:0] clk ,
  input  logic [0:0] clk_i ,
  input  logic [7:0] current_i ,
  output logic [7:0] nu_o ,
  //input  logic [0:0] reset ,
  input  logic [0:0] rst_n ,
  output logic [0:0] spike_o 
);
  logic [7:0] threshold_w;
  logic [7:0] u_w;

  // PyMTL Update Block Source
  // At /workspace/lfi.py:24
  // @update
  // def updateblk():
  //   #if (~(s.spike_o)):
  //     #s.nu_o @= s.current_i + (s.u_w >> 1)
  //   #else:
  //     #s.nu_o @= 0
  //   s.nu_o @= s.current_i + (s.u_w >> 1) if ~(s.spike_o) else 0
  //   s.spike_o @= (s.u_w >= s.threshold_w)
  
  always_comb begin : updateblk
    nu_o = ( ~spike_o ) ? current_i + ( u_w >> 1'd1 ) : 8'd0;
    spike_o = u_w >= threshold_w;
  end

  // PyMTL Update Block Source
  // At /workspace/lfi.py:16
  // @update_ff
  // def countblk():
  //   if (~s.rst_n):
  //     s.u_w <<= 0
  //     s.threshold_w <<= 127
  //   else:
  //     s.u_w <<= s.nu_o
  
  always_ff @(posedge clk_i) begin : countblk
    if ( ~rst_n ) begin
      u_w <= 8'd0;
      threshold_w <= 8'd127;
    end
    else
      u_w <= nu_o;
  end

endmodule
